package main

import (
	"fmt"
	"os"
	"strings"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/bubbletea/textinput"
)

type Tab string

type model struct {
	width     int
	height    int
	tabs      []Tab
	activeTab int
	keymaps   map[string]keymap
	filters   []textinput
}

type keymap struct {
	callback func(m *model) tea.Cmd
	desc     string
}

func (m *model) Init() tea.Cmd {
	return tea.EnterAltScreen
}

func (m *model) handleKey(msg tea.KeyMsg) tea.Cmd {
	var cmd tea.Cmd
	inputFocused := true
	if inputFocused {
		return cmd
	}
	if keymap, ok := m.keymaps[msg.String()]; ok {
		keymap.callback(m)
	}
	return cmd
}

func (m *model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	var cmd tea.Cmd

	switch msg := msg.(type) {
	case tea.KeyMsg:
		cmd = m.handleKey(msg)
		return m, cmd
	case tea.WindowSizeMsg:
		m.width = msg.Width
		m.height = msg.Height
		return m, tea.ClearScreen
	}
	return m, cmd
}

func (m model) View() string {
	content := strings.Builder{}
	return content.String()
}

func main() {
	m := model{}
	p := tea.NewProgram(&m)
	if _, err := p.Run(); err != nil {
		fmt.Fprintf(os.Stderr, "[ERROR] %v", err)
		os.Exit(1)
	}
}
